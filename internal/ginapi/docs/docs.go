// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "rylenko",
            "url": "http://github.com/rylenko",
            "email": "rylenko@tuta.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/buildings": {
            "get": {
                "description": "Gets all buildings according to passed filter paramters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "building"
                ],
                "summary": "Gets all buildings",
                "operationId": "getall-buildings",
                "parameters": [
                    {
                        "type": "string",
                        "description": "city filter",
                        "name": "city",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "handover year filter",
                        "name": "handover_year",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "floors count filter",
                        "name": "floors_count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ginapi.BuildingView"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ginapi.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ginapi.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new building using passed data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "building"
                ],
                "summary": "Creates a new building",
                "operationId": "create-building",
                "parameters": [
                    {
                        "description": "Create building",
                        "name": "building",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ginapi.BuildingBody"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ginapi.BuildingView"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ginapi.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ginapi.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "ginapi.BuildingBody": {
            "type": "object",
            "required": [
                "city",
                "floors_count",
                "handover_year",
                "name"
            ],
            "properties": {
                "city": {
                    "type": "string"
                },
                "floors_count": {
                    "type": "integer"
                },
                "handover_year": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "ginapi.BuildingView": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string"
                },
                "floors_count": {
                    "type": "integer"
                },
                "handover_year": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "ginapi.Error": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8000",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Leadgen Market Task",
	Description:      "Swagger API of Leadgen Market Task",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
